" .vimrc

" vimrc is not vi-compatible
set nocompatible

" Setting up Vundle - the vim plugin bundler

""" Vundle plugin manager {{{
let vundle_first_run=0
let vundle_readme=expand('~/.vim/bundle/Vundle.vim/README.md')
if !filereadable(vundle_readme)
  echo "Installing Vundle..."
  echo ""
  silent !mkdir -p ~/.vim/bundle
  silent !git clone https://github.com/gmarik/Vundle.vim ~/.vim/bundle/Vundle.vim
  let vundle_first_run=1
endif
""" }}}

""" Initialize Vundle {{{
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
""" }}}

""" Put Vundle plugins here {{{
Plugin 'gmarik/Vundle.vim'
Plugin 'thecodesmith/vim-colorscheme-codesmith'
Plugin 'tpope/vim-commentary'
Plugin 'tpope/vim-abolish'
Plugin 'tpope/vim-ragtag'
Plugin 'jpalardy/vim-slime'
Plugin 'godlygeek/tabular'
Plugin 'kchmck/vim-coffee-script'
Plugin 'terryma/vim-multiple-cursors'
Plugin 'Townk/vim-autoclose'
Plugin 'edsono/vim-matchit'
Plugin 'vim-scripts/groovyindent'
Plugin 'vim-scripts/taglist.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'Xuyuanp/nerdtree-git-plugin'
Plugin 'kien/ctrlp.vim'
Plugin 'dkprice/vim-easygrep'
Plugin 'msanders/snipmate.vim'
Plugin 'mtth/scratch.vim'
Plugin 'rstacruz/sparkup'
Plugin 'chase/vim-ansible-yaml'
""" }}} End Vundle plugins

""" Finalize Vundle
call vundle#end()

""" Installing plugins on first run, quits when done {{{
if vundle_first_run == 1
  :silent! PluginInstall
  :qa
endif
""" }}}

" Finished setting up Vundle

syntax enable
filetype plugin indent on

set term=screen-256color
set guifont=Lucida\ Console
colorscheme codesmith

set tabstop=4       " tab is 4 spaces
set shiftwidth=4    " number of spaces for autoindenting
set softtabstop=4
set expandtab
set autoindent      " always set autoindenting on
set copyindent      " copy the previous indentation on autoindenting
set nowrap          " don't wrap lines
set backspace=indent,eol,start

set number          " show line numbers
set colorcolumn=80  " highligh column 80
set ruler
set showcmd
set ignorecase      " ignore case when searching
set smartcase       " ignore case only if search pattern is all lowercase
set hlsearch        " highlight search terms
set incsearch       " show search matches while typing
highlight Search ctermbg=yellow ctermfg=black cterm=NONE
set history=1000    " remember more commands and search history
set undolevels=1000 " increase undo levels
set wildignore=*.swp,*.so,*.bak,*.pyc,*.class,*.zip,*/tmp/*
set visualbell      " don't beep
set noerrorbells    " don't beep

set hidden          " hide buffers instead of closing them
set nobackup        " don't write a backup file

set tags=tags;      " Set the tags file

" Save some keystrokes
nnoremap ; :

" Change leader key from \ to <Space>
let mapleader = "\<Space>"

" Map <leader>/ to clear search highlighting
nmap <silent> <leader>/ :nohlsearch<CR>

" Use Perl/Python style regex when searching
nnoremap / /\v
vnoremap / /\v

""" Plugin-specific configurations {{{

" CtrlP
let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'

" EasyGrep
let g:EasyGrepMode=2
let g:EasyGrepCommand=0
let g:EasyGrepRecursive=1
let g:EasyGrepIgnoreCase=1

" Multiple cursors
let g:multi_cursor_use_default_mapping=0
let g:multi_cursor_next_key='<C-n>'
let g:multi_cursor_quit_key='<Esc>'

" NERDTree
let NERDTreeIgnore = ['\.pyc$', '\.class$']

" Slime
let g:slime_python_ipython = 1

" Scratch
nnoremap <leader>s :Scratch<CR>
vnoremap <leader>s :Scratch<CR>

" Tabularize
nnoremap <leader>= :Tabularize<Space>/
vnoremap <leader>= :Tabularize<Space>/

" Taglist
map <F4> <Esc>:TlistToggle<CR>
let s:tlist_def_groovy_settings = 'groovy;p:package;c:class;i:interface;f:function;v:variables'

""" End plugin-specific configurations }}}

" Place cursor on indented line between curly braces
inoremap {<CR> {<CR>}<Esc>O

" Edit $MYVIMRC on the fly
nnoremap <leader>ev <C-w><C-v><C-l>:e $MYVIMRC<CR>
nnoremap <leader>sv :source $MYVIMRC<CR>

" Open a split window with <leader>w and switch to it
nnoremap <leader>w <C-w>v<C-w>l

" Go to previous tab
nnoremap gr gT

" F2 toggles showing line numbers
map <F2> :set invnumber<cr>a
map! <F2> <Esc>:set invnumber<cr>

" F5 toggles binary mode
map <F5> :%!xxd<cr>a
map <S-F5> <Esc>:%!xxd -r<cr>

" F6 deletes extra spaces at the end of a line and changes tabs to spaces
map <F6> :retab<cr>:%s/\s\+$//<cr>:noh<cr>
map! <F6> <Esc>:retab<cr>:%s/\s\+$//<cr>:noh<cr>a

function! <SID>StripTrailingWhitespace()
  let l = line(".")
  let c = col(".")
  %s/\s\+$//e
  call cursor(l, c)
endfunction

" Strip trailing whitespace automatically on file save
autocmd BufWritePre * :call <SID>StripTrailingWhitespace()

" This was not working on linux
"set clipboard=unnamed
set pastetoggle=<F8>

" Don't lose selection after indent
vnoremap < <gv
vnoremap > >gv

" Easier window navigation
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" Save all buffers when vim loses focus
au FocusLost * :wa

" Open file under cursor
map <C-i> :call OpenVariableUnderCursor(expand("<cword>"))<CR>
map <C-t> :call OpenTestUnderCursor(bufname("%"))<CR>
map <leader>h :call FindSubClasses(expand("<cword>"))<CR>

function! OpenVariableUnderCursor(varName)
  let filename = substitute(a:varName, '(<w+>)', 'u1', 'g')
  :call OpenFileUnderCursor(filename)
endfunction

function! OpenTestUnderCursor(varName)
  let filename = substitute(a:varName, '\.groovy', 'Spec', '')
  let filename = substitute(filename, 'grails-app/\(controllers\|domain\|services\)', 'src/test/groovy', '')
  :call OpenFileUnderCursor(filename)
endfunction

function! OpenFileUnderCursor(filename)
  let ext = fnamemodify(expand("%:p"), ":t:e")
  execute ":find " . a:filename . "." . ext
endfunction

function! FindSubClasses(filename)
  execute ":Grep (implements|extends) " . a:filename
endfunction

" TODO List
" tpope/fugitive.vim -- Git plugin
" tpope/surround.vim
" cheat sheet: always be learning 5-7 new things
